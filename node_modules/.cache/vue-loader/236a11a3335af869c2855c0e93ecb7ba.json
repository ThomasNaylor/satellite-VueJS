{"remainingRequest":"E:\\Learn\\new_portfolio\\satellite-VueJS\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Learn\\new_portfolio\\satellite-VueJS\\src\\components\\Satellite.vue?vue&type=style&index=0&id=cc12a88a&scoped=true&lang=css&","dependencies":[{"path":"E:\\Learn\\new_portfolio\\satellite-VueJS\\src\\components\\Satellite.vue","mtime":1546011702740},{"path":"E:\\Learn\\new_portfolio\\satellite-VueJS\\node_modules\\css-loader\\index.js","mtime":1545426004296},{"path":"E:\\Learn\\new_portfolio\\satellite-VueJS\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1545426005822},{"path":"E:\\Learn\\new_portfolio\\satellite-VueJS\\node_modules\\postcss-loader\\src\\index.js","mtime":1545426004362},{"path":"E:\\Learn\\new_portfolio\\satellite-VueJS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1545426004035},{"path":"E:\\Learn\\new_portfolio\\satellite-VueJS\\node_modules\\vue-loader\\lib\\index.js","mtime":1545426005822}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#map__cont {\n  min-width: 100%;\n  min-height: 100%;\n}\n.info__window {\n  width: 250px;\n}\n",{"version":3,"sources":["Satellite.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4JA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Satellite.vue","sourceRoot":"src\\components","sourcesContent":["<template>\n  <div id=\"map__cont\">\n    <div class=\"map\">\n      <!-- start google map container -->\n      <gmap-map\n        :center=\"center\"\n        :zoom=\"3\"\n        :options=\"mapOptions\"\n        map-type-id=\"hybrid\"\n        style=\"width:100%;  height:100vh;\">\n        <!-- start google map marker -->\n        <gmap-marker\n          v-for=\"(m, mapKey) in markers\"\n          :key=\"mapKey\"\n          :position=\"m.position\"\n          :icon=\"m.icon\"\n          @click=\"openInfoWindow()\">\n        </gmap-marker>\n        <!-- end google map marker -->\n\n        <!-- start google polyline -->\n        <gmap-polyline\n          :options=\"polylineOptions\">\n        </gmap-polyline>\n        <!-- end google polyline -->\n\n        <!-- start google info-window -->\n        <gmap-info-window\n          v-for=\"(m, infoKey) in markers\"\n          :key=\"infoKey\"\n          :opened=\"infoWindowOpen\"\n          :options=\"infoWindowOptions\"\n          :position=\"m.position\"\n          @closeclick=\"infoWindowOpen=false\">\n          <div class=\"info__window\">\n            <h3>SPACE STATION INFORMATION</h3>\n            <p>This is a simple example of how we can integrate multiple api's to create\n            something useful from the data provided. Here you will see a satellite plot a\n            trial across the globe with googles polyline function. (updates every 60 seconds)</p>\n            <h4>Raw satellite data below:</h4>\n            <div v-for=\"i in infoWindow\">\n              <span>Satelitte: {{ i.name }}</span><br>\n              <span>Visibility: {{ i.visibility }}</span><br>\n              <span>Altitude: {{ i.altitude }}</span><br>\n              <span>Velocity: {{ i.velocity }}</span><br>\n              <span>Latitude: {{ i.lat }}</span><br>\n              <span>Longitude: {{ i.lng }}</span>\n            </div>\n          </div>\n        </gmap-info-window>\n        <!-- end google info-window -->\n      </gmap-map>\n      <!-- end google map container -->\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport satgif from '../assets/spacestation/img/sat1.gif';\n\nexport default {\n  // global variables\n  name: 'spacestation',\n  data: () => ({\n    dialog: false,\n    model: null,\n    center: { Lat: 0, Lng: 0 },\n    markers: [],\n    polylineOptions: { path: [], strokeOpacity: 0, icons: [{ icon: { path: 'M 0, -1 0,1', strokeOpacity: 1, scale: 4 }, offset: '0', repeat: '20px' }] },\n    infoWindow: [],\n    infoWindowOptions: { pixelOffset: { width: 0, height: -45 } },\n    mapOptions: { disableDefaultUI: true },\n    infoWindowOpen: true,\n    satgif: satgif\n  }),\n\n  watch: {\n    dialog (val) {\n      val || this.close();\n    },\n\n    // removes markers from the array to keep satellite on the latest postion\n    markers (val) {\n      if(this.markers.length >= 2) {\n        return this.markers.shift();\n      }\n    },\n\n    // removes markers from the array to keep info-window on the latest postion\n    infoWindow (val) {\n      if(this.infoWindow.length >= 2) {\n        return this.infoWindow.shift();\n      }\n    },\n\n    // removes polylines behind satellite after 100 traces\n    polylineOptions (val) {\n      if(this.polylineOptions.path.length >= 100) {\n        return this.polylineOptions.path.shift();\n      }\n    }\n  },\n\n  // starts the app when it is mounted.\n  mounted() {\n    this.getSpaceStation();\n    setInterval (this.getSpaceStation, 60000);\n  },\n\n  methods: {\n    // get the external api data from 'whereisiis' and 'googlemaps' to plot google maps.\n    getSpaceStation () {\n      this.axios.get('https://api.wheretheiss.at/v1/satellites/25544')\n      .then((response) => {\n\n        let pos = new google.maps.LatLng(parseFloat(response.data.latitude), parseFloat(response.data.longitude));\n\n        const marker = new google.maps.Marker({\n          position: pos,\n          optimized: false,\n          icon: this.satgif\n        });\n\n        const center = pos;\n\n        this.polylineOptions.path.push(\n          pos\n        );\n\n        this.infoWindow.push({\n          name: response.data.name,\n          velocity: response.data.velocity,\n          altitude: response.data.altitude,\n          visibility: response.data.visibility,\n          lat: response.data.latitude,\n          lng: response.data.longitude,\n        });\n\n        this.center = center;\n        this.markers.push(marker);\n\n      });\n    },\n    openInfoWindow () {\n      this.infoWindowOpen = true;\n    },\n    close () {\n      this.dialog = false;\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#map__cont {\n  min-width: 100%;\n  min-height: 100%;\n}\n.info__window {\n  width: 250px;\n}\n</style>\n"]}]}